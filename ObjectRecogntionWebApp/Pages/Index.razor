@page "/"
@using System.Diagnostics
@inject IWebHostEnvironment Environment
@inject ILogger<Index> Logger
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject AppState State

<PageTitle>Home</PageTitle>
<body>
    <div class="container">
        <div class="centered">
            <img id="logo" src="mlnet_logo.png" alt="" width="250">
            <h1 class="h3 mb-3 font-weight-normal text-center">Upload a Netwatch Image Sequence</h1><br/>
            <div>
                <InputFile class="mb-3 form-control-file" name="file" accept="image/png, image/jpg, image/jpeg" id="inputfile" type="file" OnChange="@LoadFiles" multiple/>
            </div>
            <button class="btn btn-primary btn-lg detect-btn" @onclick="HandleDetection">Detect</button>
        </div>
    </div>
</body>

@code{
    private List<string> loadedFilePaths = new();
    private string currPath = Directory.GetCurrentDirectory();

    // Function that validates and stores the user uploaded files
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.FileCount != 3)
        {
            // Empty the loadedFilePaths List
            loadedFilePaths.Clear();
        }
        else
        {
            // Set the target upload directory path
            String uploadPath = @$"{currPath}\wwwroot\uploads";
            DirectoryInfo di = new DirectoryInfo(uploadPath);

            // Handle the upload directory
            if (di.Exists)
            {
                // Empty the directory
                var files = di.GetFiles();
                foreach(var file in files)
                {
                    file.Delete();
                }
                // Empty the loadedFilePaths List
                loadedFilePaths.Clear();
            }
            else
            {
                // Create the directory
                di.Create();
            }

            foreach (var file in e.GetMultipleFiles())
            {
                try
                {
                    var path = Path.Combine(Environment.ContentRootPath, "wwwroot/uploads", file.Name);
                    // Add the full image path to List
                    loadedFilePaths.Add(path);

                    // Save the file
                    await using FileStream fs = new(path, FileMode.Create);
                    await file.OpenReadStream().CopyToAsync(fs);
                }
                catch (Exception ex)
                {
                    Logger.LogError("File: {Filename} Error: {Error}", 
                        file.Name, ex.Message);
                }
            }
        }
    }

    // Variable acting as a tracker to know when to display images on the index page
    bool doneLoading;

    // Function for performing detections on input data
    private async void HandleDetection()
    {
        if (loadedFilePaths.Count == 3)
        {
            // Sets the target output directory path
            String outputPath = @$"{currPath}\wwwroot\outputs";
            DirectoryInfo di = new DirectoryInfo(outputPath);
            if (di.Exists)
            {
                // Empty the directory
                var files = di.GetFiles();
                foreach(var file in files)
                {
                    file.Delete();
                }
            }
            else
            {
                // Create the directory
                di.Create();
            }

            // Index counter to use in the output file names
            int index = 0;
            // Number of detections to display on results page
            int nbOfDetections = 0;
            //float sequenceInferenceTime = 0;

            // Perform detection on each of the 3 files that were uploaded
            foreach (var filePath in loadedFilePaths)
            {
                index++;
                // Get detections
                var detections = State.Detector.DetectObjects(filePath, State.Classes, State.Threshold);
                // Increment detection count
                nbOfDetections += detections.Count();
                // Get image output
                Image imageOutput = State.Detector.DrawDetections(filePath, detections);
                // Save image output to the output path
                imageOutput.SaveAsJpeg(@$"{outputPath}\output_{index}.jpg");
            }
            // Clear the list containing the uploaded file paths
            loadedFilePaths.Clear();
            doneLoading = true;
            // Redirect user to the results page with the route parameters
            NavigationManager.NavigateTo("results/" + nbOfDetections, true);
        }
        else
        {
            // Alert message if the attempted number of files uploaded is not equal to 3
            await JsRuntime.InvokeVoidAsync("alert", "You must upload 3 images.");
        }
    }
}