@page "/"
@using System.Diagnostics
@inject IWebHostEnvironment Environment
@inject ILogger<Index> Logger
@inject IJSRuntime JsRuntime;

<PageTitle>Index</PageTitle>
<body class="text-center">
        <img class="text-center" src="MLNET_logo.png" alt="" width="250">
        <h1 class="h3 mb-3 font-weight-normal text-center">Upload a Netwatch Image Sequence</h1><br/>

        <div>
            <InputFile class="mb-3 form-control-file" name="file" accept="image/png, image/jpg, image/jpeg" id="inputfile" type="file"  OnChange="@LoadFiles" multiple/>
        </div>
        <div>
            <button class="btn btn-primary btn-lg w-100" @onclick="HandleDetection">Detect</button>
        </div>
    @if (isLoading)
    {
        <p>Uploading...</p>
    }
</body>

@code{
    private List<string> loadedFilePaths = new();
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        if (e.FileCount != 3)
        {
            Debug.WriteLine("exactly 3 files are required.");
            loadedFilePaths.Clear();
            isLoading = false;
        }
        else
        {
            foreach (var file in e.GetMultipleFiles())
            {
                try
                {
                    //var trustedFileNameForFileStorage = Path.GetRandomFileName();
                    var path = Path.Combine(Environment.ContentRootPath, "wwwroot/uploads",
                            file.Name);
                    loadedFilePaths.Add(path);

                    await using FileStream fs = new(path, FileMode.Create);
                    await file.OpenReadStream().CopyToAsync(fs);
                }
                catch (Exception ex)
                {
                    Logger.LogError("File: {Filename} Error: {Error}", 
                        file.Name, ex.Message);
                }
            }
            isLoading = false;
        }
    }

    private async void HandleDetection()
    {
        List<Image> outputs = new();
        if (loadedFilePaths.Count == 3)
        {
            ObjectRecogntionWebApp.Model.FasterRCNN detector = new Model.FasterRCNN();

            foreach (var filePath in loadedFilePaths)
            {
                Image result = detector.DetectObjects(filePath, new HashSet<string>{"person"}, 0.7f);
                outputs.Add(result);
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "You must upload 3 images.");
        }
    }
}