@page "/config"
@inject AppState State

<PageTitle>Configuration</PageTitle>
<body>
	<h3>Object Detection Configuration</h3>
	<div class="config-container">
		<div class="config-row first">
			<div class="config-row-content">
				<label class="config-name">Detector</label>
				<span class="config-input">
					<input id="checkbox" type="radio" />Faster RCNN
				</span>
			</div>
		</div>
		<div class="config-row">
			<div class="config-row-content">
				<label class="config-name">Classes</label>
				<span class="config-input">
					@{
						if (State.Classes.Contains("person")){
							<input id="checkbox" type="checkbox" checked @onchange="@(e => ClassCheckboxHandler("person", e.Value))"/>
						}
						else
						{
							<input id="checkbox" type="checkbox" @onchange="@(e => ClassCheckboxHandler("person", e.Value))"/>
						}
						<label>Person</label>

						if (State.Classes.Contains("car")){
							<input id="checkbox" type="checkbox" checked @onchange="@(e => ClassCheckboxHandler("car", e.Value))"/>
						}
						else
						{
							<input id="checkbox" type="checkbox" @onchange="@(e => ClassCheckboxHandler("car", e.Value))"/>
						}
						<label>Car</label>
					}
				</span>
			</div>
		</div>
		<div class="config-row last">
			<div class="config-row-content">
				<label class="config-name">Detection Threshold</label>
				<span class="config-input">
					<input type="range" id="rangeInput" min="1" max="100" @bind="Threshold" @bind:event="oninput"/>@Threshold
				</span>
			</div>
		</div>
		<div>
			<input id="apply-btn" type="button" value="Apply"/>
		</div>
		@{
			foreach(var e in classes)
			{
				@e<br />
			}
		}
	</div>
</body>

@code {
	private int Threshold { get; set; } = 70;
	private HashSet<string> classes;

	protected override void OnInitialized()
	{
		classes = State.Classes;
	}

	private void ClassCheckboxHandler(string className, object checkedValue)
	{
		if((bool)checkedValue == true)
		{
			if (!classes.Contains(className))
			{
				classes.Add(className);
			}
		}
		else
		{
			if (classes.Contains(className))
			{
				classes.Remove(className);
			}
		}
	}
}
